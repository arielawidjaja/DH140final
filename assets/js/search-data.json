{
  
    
        "post0": {
            "title": "Digital Humanities 140 Final Project",
            "content": "Introduction . Ariel A. Widjaja . I am a fourth year Communication major, Digital Humanities minor at UCLA. . Date: 17 March 2022 . Project . For this project, I would like to analyze which genres of video games have the highest number in sales and play time. The video game industry started with Pong, a table tennis–themed arcade game. Video games have since grown in popularity, to the point where a population of people have made video games their livelihood. I was raised in an environment where video games were prominent (although had limited access), so I grew up taking fancy in the field. . There is also an article which asks the same question about video games, but analyzes sales and ratings. The author relates video game sales and their relations to genre, platform, and ratings among users and critics. Unfortunately, the dataset used for this project is somewhat limited due to the range of time it covers (video games were just starting out). . With the analyses in this project, I hope to find out which genres are &quot;ideal&quot; for both producers and consumers with the question: &quot;which genres of video games are the best options for consumers and producers, based on play time and used price?&quot; . It is important to note that the dataset used for this project spans from 2004 up to 2008, so the results of the data analysis may not be relevant/applicable to this day. . import pandas as pd import matplotlib.pyplot as plt import seaborn as sn from sklearn.linear_model import LinearRegression . import video_games df = pd.read_csv(&#39;video_games.csv&#39;) . Methods . The dataset used for this was taken from The Collection of Really Great, Interesting, Situated Datasets (CORGIS). Here is the link to the dataset specific to this project. . This dataset contains data regarding video games from 2004 to 2008, which include review score, sales, used price, release year, etc. However, for the purpose of this project, I will focus on used price and genres. To simplify the process, I have generated graphs that display the data in a more organized manner. This will then ease the process of analysis and making conclusions. There will be further elaborations either before or after each graph. . Here is a summary of statistics for the video game dataset used for this project: . df.describe() . Features.Max Players Metrics.Review Score Metrics.Sales Metrics.Used Price Release.Year Length.All PlayStyles.Average Length.All PlayStyles.Leisure Length.All PlayStyles.Median Length.All PlayStyles.Polled Length.All PlayStyles.Rushed ... Length.Main + Extras.Average Length.Main + Extras.Leisure Length.Main + Extras.Median Length.Main + Extras.Polled Length.Main + Extras.Rushed Length.Main Story.Average Length.Main Story.Leisure Length.Main Story.Median Length.Main Story.Polled Length.Main Story.Rushed . count 1212.000000 | 1212.000000 | 1212.00000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | ... | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | 1212.000000 | . mean 1.658416 | 68.828383 | 0.50316 | 17.393894 | 2006.820132 | 13.653177 | 26.250426 | 11.225371 | 44.415842 | 9.396163 | ... | 12.731491 | 18.866048 | 12.103548 | 13.995875 | 10.319788 | 8.465952 | 11.051966 | 8.280941 | 24.882838 | 6.974697 | . std 1.204377 | 12.956266 | 1.06985 | 5.018972 | 1.050653 | 19.397156 | 51.598941 | 13.493717 | 154.837893 | 11.176371 | ... | 23.979610 | 42.917021 | 23.355374 | 57.333257 | 20.895117 | 9.691745 | 14.092617 | 9.502600 | 87.382770 | 7.964522 | . min 1.000000 | 19.000000 | 0.01000 | 4.950000 | 2004.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 1.000000 | 60.000000 | 0.09000 | 14.950000 | 2006.000000 | 3.562500 | 4.000000 | 3.025000 | 1.000000 | 2.600000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 50% 1.000000 | 70.000000 | 0.21000 | 17.950000 | 2007.000000 | 8.858333 | 12.000000 | 8.000000 | 6.000000 | 6.708333 | ... | 7.291667 | 8.000000 | 7.000000 | 1.000000 | 6.283333 | 6.575000 | 8.000000 | 6.041667 | 3.000000 | 5.341667 | . 75% 2.000000 | 79.000000 | 0.46000 | 17.950000 | 2008.000000 | 16.033333 | 27.600000 | 13.783333 | 25.000000 | 11.366667 | ... | 16.112500 | 21.033333 | 15.000000 | 7.000000 | 12.941667 | 11.033333 | 14.508333 | 10.533333 | 14.000000 | 9.312500 | . max 8.000000 | 98.000000 | 14.66000 | 49.950000 | 2008.000000 | 279.733333 | 476.266667 | 126.000000 | 2300.000000 | 120.200000 | ... | 291.000000 | 478.933333 | 291.000000 | 1100.000000 | 291.000000 | 72.383333 | 135.583333 | 70.000000 | 1100.000000 | 70.000000 | . 8 rows × 25 columns . The brief summary of statistics shows numerical data in relation to their corresponding categories. Several data to be noted are that the length of play time, either leisurely, rushed, or everything else, all have a minimum of 0. This can mean that the games were purchased but not played at all. In addition, the standard deviation for play time data vary, showing that the difference in play time differs depending on the play style (casual, rushed, story only, completionist, etc.) Although some may consider this data as outliers, they are valid data as it still shows the amount of time spent on the game, in which case is nonexistent (zero). . All of the maximum play time in this data set is far above the average play time, which implies that there were dedicated players that spend significantly more time on the game. In addition, the average price for all the used games is 17 dollars, yet the maximum reaches near 50 dollars, which can mean that some games were very high in demand. . Here are some plots to show the range of the play time and used price: . df.sort_values(by=&#39;Length.All PlayStyles.Average&#39;,ascending=True).plot(kind=&#39;box&#39;, y=&#39;Length.All PlayStyles.Average&#39;, title=&#39;Average Length of Playing Time&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Average Length of Playing Time&#39;}&gt; . df.sort_values(by=&#39;Length.Main Story.Average&#39;,ascending=True).plot(kind=&#39;box&#39;, y=&#39;Length.Main Story.Average&#39;, title=&#39;Average Length of Playing Time (Main Story Only)&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Average Length of Playing Time (Main Story Only)&#39;}&gt; . df.sort_values(by=&#39;Length.Main + Extras.Average&#39;,ascending=True).plot(kind=&#39;box&#39;, y=&#39;Length.Main + Extras.Average&#39;, title=&#39;Average Length of Playing Time (Main Story and Extras)&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Average Length of Playing Time (Main Story and Extras)&#39;}&gt; . df.sort_values(by=&#39;Metrics.Used Price&#39;,ascending=True).plot(kind=&#39;box&#39;, y=&#39;Metrics.Used Price&#39;, title=&#39;Average Used Price&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Average Used Price&#39;}&gt; . corr_matrix = df.corr() . Results . To have a more comprehensive look at the dataset, below is a heatmap of a matrix used to highlight which columns in the dataframe have higher correlation with one another. The lighter the box&#39;s color, the higher the correlation. In addition, there is also the numeric value of the correlation on each of the boxes. . plt.figure(figsize = (15,8)) sn.heatmap(corr_matrix, annot=True, linewidths=.5) . &lt;AxesSubplot:&gt; . With this heatmap, it is easier to see which columns are more related, and which are not. For example, it is very evident that the amount of maximum players is barely related to any of the other columns just by looking at the color, but also the numbers. To have a proper analysis, the boxes that are the lightest and have the number &quot;1&quot; will be disregarded, as they are the correlation of a column to itself. . &quot;Object&quot; valued columns (words or a true/false value), such as the games&#39; genres, publishers, whether they are licensed or not, etc. cannot be shown on a matrix. What can be observed, however, are the correlations between review scores, sales, used prices, and play time, as these are numerical data. It is interesting to see that most of the average and median length of play time are extremely correlated to rushed play styles. This can mean that most players rush through the games (not playing leisurely) in this dataset. . Here is a bit of statistical coding to show how correlated the average length of play time to the average length of rushed play styles: . df.plot(kind=&#39;scatter&#39;, x=&#39;Length.All PlayStyles.Average&#39;, y=&#39;Length.All PlayStyles.Rushed&#39;, title=&#39;Correlation between the average length of play time with the average length of rushed play styles&#39;); . X_new = df[[&#39;Length.All PlayStyles.Average&#39;]].values.reshape(-1,1) y= df[[&#39;Length.All PlayStyles.Rushed&#39;]] . reg = LinearRegression().fit(X_new, y) . reg.coef_ . array([[0.53534603]]) . ytrain = reg.intercept_ + reg.coef_ * X_new . Here is one with a line, just to make it more clear. . plt.plot(X_new,y,&#39;ro&#39;,X_new,ytrain,&#39;b-&#39;); . Here are some graphs that show how unrelated the least correlated columns are: . df.plot(kind=&#39;scatter&#39;, x=&#39;Features.Max Players&#39;, y=&#39;Length.Main + Extras.Median&#39;, title=&#39;Correlation between the max players with the median length of time playing main story and extras&#39;); . X_new = df[[&#39;Features.Max Players&#39;]].values.reshape(-1,1) y= df[[&#39;Length.Main + Extras.Median&#39;]] . reg = LinearRegression().fit(X_new, y) . reg.coef_ . array([[0.00973602]]) . ytrain = reg.intercept_ + reg.coef_ * X_new . plt.plot(X_new,y,&#39;ro&#39;,X_new,ytrain,&#39;b-&#39;); . To take a closer look at why the average length of play time to the average length of rushed play styles are so correlated as shown, the following graph is generated to show the genres in this dataset along with their respective average play time. The following graph shows groups the genres&#39; content count instead of showing individual cases, although there are some overlap. This makes it hard to analyze since they either become specific genres that contain multiple genres, or that they are overlapped data. . df.groupby(&#39;Metadata.Genres&#39;)[&#39;Length.All PlayStyles.Average&#39;].mean().plot(kind=&#39;bar&#39;, figsize=(10,5), color=&#39;darkgoldenrod&#39;, title=&#39;Average Length of Time Played&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Average Length of Time Played&#39;}, xlabel=&#39;Metadata.Genres&#39;&gt; . The following code is run to counter this issue. . df = df.assign(genre_categories=df[&#39;Metadata.Genres&#39;].str.split(&#39;,&#39;)).explode(&#39;genre_categories&#39;) . df.groupby(&#39;genre_categories&#39;)[&#39;Length.All PlayStyles.Average&#39;].mean().plot(kind=&#39;bar&#39;, color=&#39;gold&#39;, title=&#39;Average Length of Time Played, All Play Styles&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Average Length of Time Played, All Play Styles&#39;}, xlabel=&#39;genre_categories&#39;&gt; . With the newer graph, it is easy to see that the role-playing game (RPG) genre takes the lead, with simulation and strategy competing for second place. To elaborate, RPGs are games where players assume the roles of characters in a fictional setting, which include a plot. Players then are responsible for making decisions to progress the story. . At this point of analysis, one of the most probable reasons why the players in this dataset rushed the game is because there is a story element in the games. It is no surprise that the games&#39; enthusiasts would not like to be spoiled by their fellow gamers. Another probable reason is that players may tend to attempt finishing story-driven games in one or a few sessions, given that there is a story and they might lose track of their progress if they were to stop for too long. . The genres that had the lowest averages for playtime are educational and sports games. It is unsurprising that educational games are the least played, due to the nature of the content. . According to this article by Juliane M. von der Heiden, Beate Braun, Kai W. Müller, and Boris Egloff, people were playing games to distract oneself from stress and to have something to talk about with others. A notable finding in this paper is that several participants in their study who played video games to improve their real-life abilities also reported more online connections (to increase social behavior and relations). Their findings also suggested that other effects of playing video games include stimulating imagination, and to satisfy curiosity. Both of these are generally doable in RPGs. . The following is a graph about genres and their respective play times, but rushed. . df = df.assign(publishers=df[&#39;Metadata.Publishers&#39;].str.split(&#39;,&#39;)).explode(&#39;publishers&#39;) . df.groupby(&#39;genre_categories&#39;)[&#39;Length.All PlayStyles.Rushed&#39;].mean().plot(kind=&#39;bar&#39;, color=&#39;gold&#39;, title=&#39;Length of Time Played Rushed Based on Genre&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Length of Time Played Rushed Based on Genre&#39;}, xlabel=&#39;genre_categories&#39;&gt; . As can be seen, the two previous graphs are very similar in shape. This was also proven with the scatter plots from earlier. RPGs dominate the length of time played even though they were rushed. A probably reason why they have the longest average play time is the previously mentioned story factor. If the story in the game is compelling enough, players would generally play through the whole game to see how the story ends. This is different for educational and sports games, where stories are not prominent and the games tend to be repetitive. . The following graph shows the genres along with their average resale price (used games): . df.groupby(&#39;genre_categories&#39;)[&#39;Metrics.Used Price&#39;].mean().plot(kind=&#39;barh&#39;, figsize=(15,5), color=&#39;darkolivegreen&#39;, title=&#39;Average Used Price&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Average Used Price&#39;}, ylabel=&#39;genre_categories&#39;&gt; . The average price for used games is also taken over by RPGs. On the other hand, sports games generally sell for about 5 dollars less than RPGs (and sold for lower than all the other genres). Although the prices are not too far off from the other genres, the previously stated factors (average length of time played) must be noted. . Below is a graph of publishers and their games&#39; average used price: . df.groupby(&#39;publishers&#39;)[&#39;Metrics.Used Price&#39;].mean().plot(kind=&#39;barh&#39;, figsize=(15,5), color=&#39;lightgreen&#39;, title=&#39;Average Used Price&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Average Used Price&#39;}, ylabel=&#39;publishers&#39;&gt; . This graph shows that Nintendo games generally are sold close to 25 dollars, while other publishers&#39; games generally sell for 20 dollars or under. This is unsurprising and most likely relevant to this day, considering that most newly released official Nintendo games (made by Nintendo and has popular characters) usually cost 60 dollars nowadays. This may tie back to consumer expectations, according to this article. However, this also ties to the release of newer consoles and the increase of demand. Most notable publishers with specific platforms (not Personal Computers or laptops) are Sony on PlayStations; Nintendo on the Nintendo Switch and its variations, and among other Nintendo released platforms; and Rockstar, Ubisoft, Sega, Konami, and Activision on the Xbox series. . df.groupby(&#39;publishers&#39;)[&#39;Metrics.Sales&#39;].mean().plot(kind=&#39;barh&#39;, figsize=(15,5), color=&#39;mediumaquamarine&#39;, title=&#39;Sales&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Sales&#39;}, ylabel=&#39;publishers&#39;&gt; . Discussion . So far, the analyses show that role playing games have the highest average for time played and are generally sold for more than other genres. Producer-wise, this could mean that RPGs are high in demand and most likely sell well. Companies should be encouraged to produce more RPGs after looking at this data analysis. Consumer-wise, the average for time played may encourage them to purchase RPGs and may enjoy it. This is because people generally would not spend a lot of time on games they do not enjoy. . On the other hand, sports games generally have shorter play times and sell for lower than other genres. Producers might steer away from this genre as the games in this genre would most likely not bring in as much profit as RPGs would. Consumer-wise, people might be tempted to buy sports games because they cost less than other genres, but seeing that the average play time is also lower than most others, it may not be worth it. . In short, RPGs are the most beneficial for both consumers and the companies producing them while sports games are the least. Players gain more from games by spending time playing, while companies gain from sales. Also, there is no guarantee where a game being in either genre will fit in the conclusions of this analysis, since the outcome also depends on the content of the game (influenced by genre). . This analysis was made to help producers decide which genre of games they would want to focus on making, and consumers to see which genres they should spend more on. In addition, more people have gotten into video games, either for entertainment (playing the games or watching people play) or entertaining (making content with or about video games). This field has become quite prominent and has been a source of income for a number of people. Having a pointer into which genres to focus on may help in their endeavours. This is also a point for rising gaming companies who produce video games. People and companies can choose which genres they want to get involved with, as people have their own interests and passions. . Again, it must be noted that the data used in this analysis ranges from 2004 to 2008. Some publishers that focused on specific genres in those years may have changed their focused genre and pricing range. .",
            "url": "https://arielawidjaja.github.io/DH140final/fastpages/jupyter/2022/03/18/140-Final-Project.html",
            "relUrl": "/fastpages/jupyter/2022/03/18/140-Final-Project.html",
            "date": " • Mar 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://arielawidjaja.github.io/DH140final/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://arielawidjaja.github.io/DH140final/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://arielawidjaja.github.io/DH140final/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://arielawidjaja.github.io/DH140final/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}